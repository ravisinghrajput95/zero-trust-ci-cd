name: Zero Trust CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build & Scan Artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-image:latest .

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/my-image:latest'
          format: 'table'
          exit-code: '0'                   #set to 1 in case to fail the build
          severity: 'CRITICAL'

      - name: Push Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-image:latest

      - name: Retrieve Image Digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKERHUB_USERNAME }}/my-image:latest | awk -F'@' '{print $2}')
          echo "IMAGE_DIGEST=$DIGEST" >> $GITHUB_ENV

      - name: Install Cosign
        run: |
          curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign

      - name: Decode Cosign Key
        run: echo "${{ secrets.COSIGN_KEY }}" | base64 --decode > cosign.key

      - name: Sign Image with Cosign
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_YES: "true"   # <--- This auto-confirms signing
        run: |
          cosign sign --key cosign.key ${{ secrets.DOCKERHUB_USERNAME }}/my-image@$IMAGE_DIGEST
      
      - name: Setup Cosign Public Key from Secret
        run: |
          echo "${{ secrets.COSIGN_PUB }}" > cosign.pub
          chmod 600 cosign.pub

      - name: Verify Signature
        run: |
          cosign verify --key cosign.pub ${{ secrets.DOCKERHUB_USERNAME }}/my-image@$IMAGE_DIGEST

      - name: Setup OPA
        uses: open-policy-agent/setup-opa@v2
        with:
          version: latest

      - name: Run OPA Tests
        run: opa test policies/*.rego 

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOIDC
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS Access
        run: aws sts get-caller-identity

      - name: Configure EKS Access
        run: aws eks update-kubeconfig --name ${{ secrets.AWS_EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      - name: Install kubectl for EKS 1.30
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mkdir -p ~/.local/bin
          mv ./kubectl ~/.local/bin/kubectl
          kubectl version --client

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yml
          kubectl apply -f k8s/service.yml
          kubectl rollout status deployment/flask-app